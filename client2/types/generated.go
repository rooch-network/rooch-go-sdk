package types

import (
	"encoding/json"
	"fmt"
	"time"
)

/**
 *  ######################################
 *  ### DO NOT EDIT THIS FILE DIRECTLY ###
 *  ######################################
 *
 * This file is generated from the OpenRPC specification
 */

// AccumulatorInfoView represents information about an accumulator
type AccumulatorInfoView struct {
	AccumulatorRoot    string   `json:"accumulator_root"`
	FrozenSubtreeRoots []string `json:"frozen_subtree_roots"`
	NumLeaves          string   `json:"num_leaves"`
	NumNodes           string   `json:"num_nodes"`
}

// AnnotatedFunctionResultView represents the result of an annotated function
type AnnotatedFunctionResultView struct {
	ReturnValues *[]AnnotatedFunctionReturnValueView `json:"return_values,omitempty"`
	VMStatus     VMStatusView                        `json:"vm_status"`
}

// AnnotatedFunctionReturnValueView represents a return value from an annotated function
type AnnotatedFunctionReturnValueView struct {
	DecodedValue AnnotatedMoveValueView  `json:"decoded_value"`
	Value        FunctionReturnValueView `json:"value"`
}

// AnnotatedMoveStructView represents an annotated Move structure
type AnnotatedMoveStructView struct {
	Abilities int                               `json:"abilities"`
	Type      string                            `json:"type"`
	Value     map[string]AnnotatedMoveValueView `json:"value"`
}

// AnnotatedMoveValueView represents different possible Move values
type AnnotatedMoveValueView interface{}

// BalanceInfoView represents balance information
type BalanceInfoView struct {
	Balance  string  `json:"balance"`
	CoinType string  `json:"coin_type"`
	Decimals int     `json:"decimals"`
	IconURL  *string `json:"icon_url,omitempty"`
	Name     string  `json:"name"`
	Supply   string  `json:"supply"`
	Symbol   string  `json:"symbol"`
}

// BitcoinStatus represents the status of Bitcoin
type BitcoinStatus struct {
	ConfirmedBlock *BlockHeightHashView `json:"confirmed_block,omitempty"`
	PendingBlock   *BlockHeightHashView `json:"pending_block,omitempty"`
}

// BlockHeightHashView represents a block height and hash
type BlockHeightHashView struct {
	BlockHash   string `json:"block_hash"`
	BlockHeight string `json:"block_height"`
}

// DisplayFieldsView represents display fields
type DisplayFieldsView struct {
	Fields map[string]string `json:"fields"`
}

// DryRunTransactionResponseView represents the response of a dry run transaction
type DryRunTransactionResponseView struct {
	RawOutput   RawTransactionOutputView `json:"raw_output"`
	VMErrorInfo VMErrorInfo              `json:"vm_error_info"`
}

// EventFilterView represents different types of event filters
type EventFilterView interface{}

// EventTypeWithSenderFilter represents an event filter by type and sender
type EventTypeWithSenderFilter struct {
	EventType string `json:"event_type"`
	Sender    string `json:"sender"`
}

// EventIDView represents an event ID
type EventIDView struct {
	EventHandleID string `json:"event_handle_id"`
	EventSeq      string `json:"event_seq"`
}

// EventOptions represents options for events
type EventOptions struct {
	Decode *bool `json:"decode,omitempty"`
}

// EventView represents an event
type EventView struct {
	DecodedEventData *AnnotatedMoveStructView `json:"decoded_event_data,omitempty"`
	EventData        string                   `json:"event_data"`
	EventID          EventIDView              `json:"event_id"`
	EventIndex       string                   `json:"event_index"`
	EventType        string                   `json:"event_type"`
}

// ExecuteTransactionResponseView represents the response of an executed transaction
type ExecuteTransactionResponseView struct {
	ErrorInfo     *DryRunTransactionResponseView `json:"error_info,omitempty"`
	ExecutionInfo TransactionExecutionInfoView   `json:"execution_info"`
	Output        *TransactionOutputView         `json:"output,omitempty"`
	SequenceInfo  TransactionSequenceInfoView    `json:"sequence_info"`
}

// FunctionCallView represents a function call
type FunctionCallView struct {
	Args       []string `json:"args"`
	FunctionID string   `json:"function_id"`
	TyArgs     []string `json:"ty_args"`
}

// FunctionReturnValueView represents a function return value
type FunctionReturnValueView struct {
	TypeTag string `json:"type_tag"`
	Value   string `json:"value"`
}

// IndexerEventIDView represents an indexer event ID
type IndexerEventIDView struct {
	EventIndex string `json:"event_index"`
	TxOrder    string `json:"tx_order"`
}

// IndexerEventView represents an indexer event
type IndexerEventView struct {
	CreatedAt        string                   `json:"created_at"`
	DecodedEventData *AnnotatedMoveStructView `json:"decoded_event_data,omitempty"`
	EventData        string                   `json:"event_data"`
	EventID          EventIDView              `json:"event_id"`
	EventType        string                   `json:"event_type"`
	IndexerEventID   IndexerEventIDView       `json:"indexer_event_id"`
	Sender           string                   `json:"sender"`
	TxHash           string                   `json:"tx_hash"`
}

// IndexerObjectStateView represents an indexer object state
type IndexerObjectStateView struct {
	CreatedAt           string                   `json:"created_at"`
	DecodedValue        *AnnotatedMoveStructView `json:"decoded_value,omitempty"`
	DisplayFields       *DisplayFieldsView       `json:"display_fields,omitempty"`
	Flag                int                      `json:"flag"`
	ID                  string                   `json:"id"`
	ObjectType          string                   `json:"object_type"`
	Owner               string                   `json:"owner"`
	OwnerBitcoinAddress *string                  `json:"owner_bitcoin_address,omitempty"`
	Size                string                   `json:"size"`
	StateIndex          string                   `json:"state_index"`
	StateRoot           *string                  `json:"state_root,omitempty"`
	TxOrder             string                   `json:"tx_order"`
	UpdatedAt           string                   `json:"updated_at"`
	Value               string                   `json:"value"`
}

// IndexerStateIDView represents an indexer state ID
type IndexerStateIDView struct {
	StateIndex string `json:"state_index"`
	TxOrder    string `json:"tx_order"`
}

// InscriptionFilterView represents different types of inscription filters
type InscriptionFilterView interface{}

type InscriptionOwnerFilter struct {
	Owner string `json:"owner"`
}

type InscriptionIDFilter struct {
	InscriptionID string `json:"inscription_id"`
}

type InscriptionObjectIDFilter struct {
	ObjectID string `json:"object_id"`
}

// InscriptionStateView represents an inscription state
type InscriptionStateView struct {
	CreatedAt           string          `json:"created_at"`
	Flag                int             `json:"flag"`
	ID                  string          `json:"id"`
	ObjectType          string          `json:"object_type"`
	Owner               string          `json:"owner"`
	OwnerBitcoinAddress *string         `json:"owner_bitcoin_address,omitempty"`
	Size                string          `json:"size"`
	StateIndex          string          `json:"state_index"`
	StateRoot           *string         `json:"state_root,omitempty"`
	TxOrder             string          `json:"tx_order"`
	UpdatedAt           string          `json:"updated_at"`
	Value               InscriptionView `json:"value"`
}

// InscriptionView represents an inscription
type InscriptionView struct {
	Body              string       `json:"body"`
	Charms            int          `json:"charms"`
	ContentEncoding   *string      `json:"content_encoding,omitempty"`
	ContentType       *string      `json:"content_type,omitempty"`
	ID                string       `json:"id"`
	InscriptionNumber int          `json:"inscription_number"`
	Location          SatPointView `json:"location"`
	Metadata          string       `json:"metadata"`
	Metaprotocol      *string      `json:"metaprotocol,omitempty"`
	Parents           []string     `json:"parents"`
	Pointer           *string      `json:"pointer,omitempty"`
	SequenceNumber    int          `json:"sequence_number"`
}

// LedgerTransactionView represents a ledger transaction
type LedgerTransactionView struct {
	Data         LedgerTxDataView            `json:"data"`
	SequenceInfo TransactionSequenceInfoView `json:"sequence_info"`
}

// LedgerTxDataView represents different types of ledger transaction data
type LedgerTxDataView interface{}

type L1BlockTxData struct {
	BitcoinBlockHash *string `json:"bitcoin_block_hash,omitempty"`
	BlockHash        string  `json:"block_hash"`
	BlockHeight      string  `json:"block_height"`
	ChainID          string  `json:"chain_id"`
	Type             string  `json:"type"` // Always "l1_block"
}

type L1TxData struct {
	BitcoinBlockHash *string `json:"bitcoin_block_hash,omitempty"`
	BitcoinTxid      *string `json:"bitcoin_txid,omitempty"`
	BlockHash        string  `json:"block_hash"`
	ChainID          string  `json:"chain_id"`
	Txid             string  `json:"txid"`
	Type             string  `json:"type"` // Always "l1_tx"
}

type L2TxData struct {
	Action               MoveActionView     `json:"action"`
	ActionType           MoveActionTypeView `json:"action_type"`
	Raw                  string             `json:"raw"`
	Sender               string             `json:"sender"`
	SenderBitcoinAddress *string            `json:"sender_bitcoin_address,omitempty"`
	SequenceNumber       string             `json:"sequence_number"`
	Type                 string             `json:"type"` // Always "l2_tx"
}

// ModuleABIView represents a Move module ABI
type ModuleABIView struct {
	Address   string             `json:"address"`
	Friends   []string           `json:"friends"`
	Functions []MoveFunctionView `json:"functions"`
	Name      string             `json:"name"`
	Structs   []MoveStructView   `json:"structs"`
}

// MoveActionTypeView represents different types of Move actions
type MoveActionTypeView string

const (
	MoveActionTypeScriptCall   MoveActionTypeView = "scriptcall"
	MoveActionTypeFunctionCall MoveActionTypeView = "functioncall"
	MoveActionTypeModuleBundle MoveActionTypeView = "modulebundle"
)

// String returns the string representation of MoveActionTypeView
func (m MoveActionTypeView) String() string {
	return string(m)
}

// MoveActionView represents a Move action
type MoveActionView struct {
	FunctionCall *FunctionCallView `json:"function_call,omitempty"`
	ModuleBundle *[]string         `json:"module_bundle,omitempty"`
	ScriptCall   *ScriptCallView   `json:"script_call,omitempty"`
}

// ... Continue with remaining types ...

// PaginatedResponse is a generic type for paginated responses
type PaginatedResponse[T any] struct {
	Data        []T         `json:"data"`
	HasNextPage bool        `json:"has_next_page"`
	NextCursor  interface{} `json:"next_cursor,omitempty"`
}

// Define specific paginated response types
type PaginatedBalanceInfoViews = PaginatedResponse[BalanceInfoView]
type PaginatedEventViews = PaginatedResponse[EventView]
type PaginatedIndexerEventViews = PaginatedResponse[IndexerEventView]
type PaginatedIndexerObjectStateViews = PaginatedResponse[IndexerObjectStateView]
type PaginatedInscriptionStateViews = PaginatedResponse[InscriptionStateView]
type PaginatedStateChangeSetWithTxOrderViews = PaginatedResponse[StateChangeSetWithTxOrderView]
type PaginatedStateKVViews = PaginatedResponse[StateKVView]
type PaginatedTransactionWithInfoViews = PaginatedResponse[TransactionWithInfoView]
type PaginatedUTXOStateViews = PaginatedResponse[UTXOStateView]

// QueryOptions represents options for queries
type QueryOptions struct {
	Decode      *bool `json:"decode,omitempty"`
	Descending  *bool `json:"descending,omitempty"`
	FilterOut   *bool `json:"filterOut,omitempty"`
	ShowDisplay *bool `json:"showDisplay,omitempty"`
}

// StateOptions represents options for state queries
type StateOptions struct {
	Decode      *bool   `json:"decode,omitempty"`
	ShowDisplay *bool   `json:"showDisplay,omitempty"`
	StateRoot   *string `json:"stateRoot,omitempty"`
}

// Status represents the overall system status
type Status struct {
	BitcoinStatus BitcoinStatus `json:"bitcoin_status"`
	RoochStatus   RoochStatus   `json:"rooch_status"`
	ServiceStatus ServiceStatus `json:"service_status"`
}

// ServiceStatus represents different service states
type ServiceStatus string

const (
	ServiceStatusActive         ServiceStatus = "active"
	ServiceStatusMaintenance    ServiceStatus = "maintenance"
	ServiceStatusReadOnlyMode   ServiceStatus = "read-only-mode"
	ServiceStatusDateImportMode ServiceStatus = "date-import-mode"
)

// String returns the string representation of ServiceStatus
func (s ServiceStatus) String() string {
	return string(s)
}

// Helper methods for PaginatedResponse
func NewPaginatedResponse[T any](data []T, hasNextPage bool, nextCursor interface{}) PaginatedResponse[T] {
	return PaginatedResponse[T]{
		Data:        data,
		HasNextPage: hasNextPage,
		NextCursor:  nextCursor,
	}
}

// Helper method for EventFilterView creation
func NewEventTypeWithSenderFilter(eventType, sender string) EventTypeWithSenderFilter {
	return EventTypeWithSenderFilter{
		EventType: eventType,
		Sender:    sender,
	}
}

// Helper method for InscriptionFilterView creation
func NewInscriptionOwnerFilter(owner string) InscriptionOwnerFilter {
	return InscriptionOwnerFilter{
		Owner: owner,
	}
}

// Helper method for creating new StateOptions
func NewStateOptions(decode, showDisplay bool, stateRoot string) StateOptions {
	return StateOptions{
		Decode:      &decode,
		ShowDisplay: &showDisplay,
		StateRoot:   &stateRoot,
	}
}

// Helper method for creating new QueryOptions
func NewQueryOptions(decode, descending, filterOut, showDisplay bool) QueryOptions {
	return QueryOptions{
		Decode:      &decode,
		Descending:  &descending,
		FilterOut:   &filterOut,
		ShowDisplay: &showDisplay,
	}
}

// Helper method for VMErrorInfo
func NewVMErrorInfo(errorMessage string, executionState []string) VMErrorInfo {
	return VMErrorInfo{
		ErrorMessage:   errorMessage,
		ExecutionState: executionState,
	}
}

// Helper method for creating new TransactionAuthenticatorView
func NewTransactionAuthenticatorView(authenticatorType string) TransactionAuthenticatorView {
	return TransactionAuthenticatorView{
		AuthenticatorType: authenticatorType,
	}
}

// Helper method for creating new BitcoinAuthDataView
func NewBitcoinAuthDataView(address, message, signature string) BitcoinAuthDataView {
	return BitcoinAuthDataView{
		Address:   address,
		Message:   message,
		Signature: signature,
	}
}

// Helper method for creating new EventView
func NewEventView(eventData string, eventID EventIDView, eventIndex, eventType string) EventView {
	return EventView{
		EventData:  eventData,
		EventID:    eventID,
		EventIndex: eventIndex,
		EventType:  eventType,
	}
}

// IsActive checks if the service status is active
func (s ServiceStatus) IsActive() bool {
	return s == ServiceStatusActive
}

// IsMaintenance checks if the service status is in maintenance
func (s ServiceStatus) IsMaintenance() bool {
	return s == ServiceStatusMaintenance
}

// Helper method to check if a transaction is pending
func (t TransactionStatusView) IsPending() bool {
	return t == TransactionStatusPending
}

// Helper method to check if a transaction is executed
func (t TransactionStatusView) IsExecuted() bool {
	return t == TransactionStatusExecuted
}

// Helper method to check if a transaction failed
func (t TransactionStatusView) IsFailed() bool {
	return t == TransactionStatusFailed
}

// VMStatusView represents the status of a VM operation
type VMStatusView interface{}

// VMErrorInfo represents VM error information
type VMErrorInfo struct {
	ErrorMessage   string   `json:"error_message"`
	ExecutionState []string `json:"execution_state"`
}

// KeptVMStatusView represents different types of VM status
type KeptVMStatusView struct {
	Type       string  `json:"type"`
	AbortCode  *string `json:"abort_code,omitempty"`
	Location   *string `json:"location,omitempty"`
	CodeOffset *int    `json:"code_offset,omitempty"`
	Function   *int    `json:"function,omitempty"`
}

// RawTransactionOutputView represents raw transaction output
type RawTransactionOutputView struct {
	Events   []EventView               `json:"events"`
	Return   []FunctionReturnValueView `json:"return"`
	VMStatus VMStatusView              `json:"vm_status"`
}

// RoochStatus represents Rooch system status
type RoochStatus struct {
	ChainID           string `json:"chain_id"`
	LatestBlockHash   string `json:"latest_block_hash"`
	LatestBlockHeight string `json:"latest_block_height"`
}

// SatPointView represents a satoshi point
type SatPointView struct {
	Offset   string `json:"offset"`
	Outpoint string `json:"outpoint"`
}

// ScriptCallView represents a script call
type ScriptCallView struct {
	Args   []string `json:"args"`
	Script string   `json:"script"`
	TyArgs []string `json:"ty_args"`
}

// StateChangeSetWithTxOrderView represents a state change set with transaction order
type StateChangeSetWithTxOrderView struct {
	CreatedAt string                `json:"created_at"`
	StateKey  string                `json:"state_key"`
	TxOrder   string                `json:"tx_order"`
	UpdatedAt string                `json:"updated_at"`
	Value     StateValueWithTxOrder `json:"value"`
}

// StateKVView represents a state key-value pair
type StateKVView struct {
	Key   string      `json:"key"`
	Value interface{} `json:"value"`
}

// StateValueWithTxOrder represents a state value with transaction order
type StateValueWithTxOrder struct {
	DecodedValue *AnnotatedMoveStructView `json:"decoded_value,omitempty"`
	Value        string                   `json:"value"`
}

// TransactionExecutionInfoView represents transaction execution information
type TransactionExecutionInfoView struct {
	Authentication []TransactionAuthenticatorView `json:"authentication"`
	Hash           string                         `json:"hash"`
	Status         TransactionStatusView          `json:"status"`
}

// TransactionAuthenticatorView represents a transaction authenticator
type TransactionAuthenticatorView struct {
	AuthenticatorType string               `json:"authenticator_type"`
	BitcoinAuthData   *BitcoinAuthDataView `json:"bitcoin_auth_data,omitempty"`
	PublicKey         *string              `json:"public_key,omitempty"`
	Signature         *string              `json:"signature,omitempty"`
}

// BitcoinAuthDataView represents Bitcoin authentication data
type BitcoinAuthDataView struct {
	Address   string `json:"address"`
	Message   string `json:"message"`
	Signature string `json:"signature"`
}

// TransactionOutputView represents transaction output
type TransactionOutputView struct {
	Events []EventView               `json:"events"`
	Return []FunctionReturnValueView `json:"return"`
}

// TransactionSequenceInfoView represents transaction sequence information
type TransactionSequenceInfoView struct {
	TxHash  string `json:"tx_hash"`
	TxOrder string `json:"tx_order"`
}

// TransactionStatusView represents transaction status
type TransactionStatusView string

const (
	TransactionStatusPending  TransactionStatusView = "pending"
	TransactionStatusExecuted TransactionStatusView = "executed"
	TransactionStatusFailed   TransactionStatusView = "failed"
)

// String returns the string representation of TransactionStatusView
func (t TransactionStatusView) String() string {
	return string(t)
}

// MarshalJSON implements json.Marshaler
func (t TransactionStatusView) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

// UnmarshalJSON implements json.Unmarshaler
func (t *TransactionStatusView) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case string(TransactionStatusPending),
		string(TransactionStatusExecuted),
		string(TransactionStatusFailed):
		*t = TransactionStatusView(s)
		return nil
	default:
		return fmt.Errorf("invalid TransactionStatusView value: %s", s)
	}
}

// TransactionWithInfoView represents a transaction with additional information
type TransactionWithInfoView struct {
	ExecutionInfo  TransactionExecutionInfoView `json:"execution_info"`
	RawTransaction LedgerTransactionView        `json:"raw_transaction"`
}

// UTXOStateView represents UTXO state
type UTXOStateView struct {
	Amount         string `json:"amount"`
	BitcoinAddress string `json:"bitcoin_address"`
	CreatedAt      string `json:"created_at"`
	OutPoint       string `json:"out_point"`
	RoochAddress   string `json:"rooch_address"`
	StateIndex     string `json:"state_index"`
	TxOrder        string `json:"tx_order"`
	UpdatedAt      string `json:"updated_at"`
}

// MoveFunctionView represents a Move function
type MoveFunctionView struct {
	Name              string   `json:"name"`
	Visibility        string   `json:"visibility"`
	IsEntry           bool     `json:"is_entry"`
	GenericTypeParams []string `json:"generic_type_params"`
	Params            []string `json:"params"`
	Returns           []string `json:"returns"`
}

// MoveStructView represents a Move struct
type MoveStructView struct {
	Name              string          `json:"name"`
	IsNative          bool            `json:"is_native"`
	Abilities         []string        `json:"abilities"`
	GenericTypeParams []string        `json:"generic_type_params"`
	Fields            []MoveFieldView `json:"fields"`
}

// MoveFieldView represents a Move field
type MoveFieldView struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// StateChangeSetView represents a state change set
type StateChangeSetView struct {
	CreatedAt string     `json:"created_at"`
	StateKey  string     `json:"state_key"`
	UpdatedAt string     `json:"updated_at"`
	Value     StateValue `json:"value"`
}

// StateValue represents a state value
type StateValue struct {
	DecodedValue *AnnotatedMoveStructView `json:"decoded_value,omitempty"`
	Value        string                   `json:"value"`
}

// RawTransactionView represents a raw transaction
type RawTransactionView struct {
	Data LedgerTxDataView `json:"data"`
}

// Helper methods for AccumulatorInfoView
func NewAccumulatorInfoView(root string, frozenRoots []string, leaves, nodes string) AccumulatorInfoView {
	return AccumulatorInfoView{
		AccumulatorRoot:    root,
		FrozenSubtreeRoots: frozenRoots,
		NumLeaves:          leaves,
		NumNodes:           nodes,
	}
}

// Helper methods for AnnotatedFunctionResultView
func NewAnnotatedFunctionResultView(returnValues []AnnotatedFunctionReturnValueView, vmStatus VMStatusView) AnnotatedFunctionResultView {
	return AnnotatedFunctionResultView{
		ReturnValues: &returnValues,
		VMStatus:     vmStatus,
	}
}

// Helper methods for BalanceInfoView
func NewBalanceInfoView(balance, coinType string, decimals int, name, supply, symbol string) BalanceInfoView {
	return BalanceInfoView{
		Balance:  balance,
		CoinType: coinType,
		Decimals: decimals,
		Name:     name,
		Supply:   supply,
		Symbol:   symbol,
	}
}

// Helper method to set optional IconURL
func (b *BalanceInfoView) SetIconURL(url string) {
	b.IconURL = &url
}

// Helper methods for BitcoinStatus
func NewBitcoinStatus() BitcoinStatus {
	return BitcoinStatus{}
}

// Helper method to set confirmed block
func (b *BitcoinStatus) SetConfirmedBlock(block BlockHeightHashView) {
	b.ConfirmedBlock = &block
}

// Helper method to set pending block
func (b *BitcoinStatus) SetPendingBlock(block BlockHeightHashView) {
	b.PendingBlock = &block
}

// Helper methods for EventView
type EventViewBuilder struct {
	event EventView
}

func NewEventViewBuilder() *EventViewBuilder {
	return &EventViewBuilder{
		event: EventView{},
	}
}

func (b *EventViewBuilder) SetEventData(data string) *EventViewBuilder {
	b.event.EventData = data
	return b
}

func (b *EventViewBuilder) SetEventID(id EventIDView) *EventViewBuilder {
	b.event.EventID = id
	return b
}

func (b *EventViewBuilder) SetEventIndex(index string) *EventViewBuilder {
	b.event.EventIndex = index
	return b
}

func (b *EventViewBuilder) SetEventType(eventType string) *EventViewBuilder {
	b.event.EventType = eventType
	return b
}

func (b *EventViewBuilder) SetDecodedEventData(data *AnnotatedMoveStructView) *EventViewBuilder {
	b.event.DecodedEventData = data
	return b
}

func (b *EventViewBuilder) Build() EventView {
	return b.event
}

// Helper methods for TransactionWithInfoView
func NewTransactionWithInfoView(executionInfo TransactionExecutionInfoView, rawTransaction LedgerTransactionView) TransactionWithInfoView {
	return TransactionWithInfoView{
		ExecutionInfo:  executionInfo,
		RawTransaction: rawTransaction,
	}
}

// Helper methods for UTXOStateView
type UTXOStateViewBuilder struct {
	utxo UTXOStateView
}

func NewUTXOStateViewBuilder() *UTXOStateViewBuilder {
	return &UTXOStateViewBuilder{
		utxo: UTXOStateView{
			CreatedAt: time.Now().UTC().Format(time.RFC3339),
			UpdatedAt: time.Now().UTC().Format(time.RFC3339),
		},
	}
}

func (b *UTXOStateViewBuilder) SetAmount(amount string) *UTXOStateViewBuilder {
	b.utxo.Amount = amount
	return b
}

func (b *UTXOStateViewBuilder) SetBitcoinAddress(address string) *UTXOStateViewBuilder {
	b.utxo.BitcoinAddress = address
	return b
}

func (b *UTXOStateViewBuilder) SetOutPoint(outPoint string) *UTXOStateViewBuilder {
	b.utxo.OutPoint = outPoint
	return b
}

func (b *UTXOStateViewBuilder) SetRoochAddress(address string) *UTXOStateViewBuilder {
	b.utxo.RoochAddress = address
	return b
}

func (b *UTXOStateViewBuilder) SetStateIndex(index string) *UTXOStateViewBuilder {
	b.utxo.StateIndex = index
	return b
}

func (b *UTXOStateViewBuilder) SetTxOrder(order string) *UTXOStateViewBuilder {
	b.utxo.TxOrder = order
	return b
}

func (b *UTXOStateViewBuilder) Build() UTXOStateView {
	return b.utxo
}

// Helper methods for MoveFunctionView
func NewMoveFunctionView(name, visibility string, isEntry bool) MoveFunctionView {
	return MoveFunctionView{
		Name:       name,
		Visibility: visibility,
		IsEntry:    isEntry,
	}
}

// Helper method to add generic type parameters
func (m *MoveFunctionView) AddGenericTypeParams(params ...string) {
	m.GenericTypeParams = append(m.GenericTypeParams, params...)
}

// Helper method to add parameters
func (m *MoveFunctionView) AddParams(params ...string) {
	m.Params = append(m.Params, params...)
}

// Helper method to add return types
func (m *MoveFunctionView) AddReturns(returns ...string) {
	m.Returns = append(m.Returns, returns...)
}

// Helper methods for error handling
type RoochError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (e *RoochError) Error() string {
	return fmt.Sprintf("RoochError: [%d] %s", e.Code, e.Message)
}

// Helper method for creating new RoochError
func NewRoochError(code int, message string) *RoochError {
	return &RoochError{
		Code:    code,
		Message: message,
	}
}

// Helper methods for validation
func ValidateAddress(address string) error {
	if len(address) == 0 {
		return NewRoochError(400, "address cannot be empty")
	}
	// Add more validation logic as needed
	return nil
}

func ValidateHash(hash string) error {
	if len(hash) == 0 {
		return NewRoochError(400, "hash cannot be empty")
	}
	// Add more validation logic as needed
	return nil
}

// Helper method for creating pagination parameters
type PaginationParams struct {
	Limit  int         `json:"limit"`
	Cursor interface{} `json:"cursor,omitempty"`
}

func NewPaginationParams(limit int) PaginationParams {
	return PaginationParams{
		Limit: limit,
	}
}

func (p *PaginationParams) SetCursor(cursor interface{}) {
	p.Cursor = cursor
}

// Helper method for timestamp handling
func ParseTimestamp(timestamp string) (time.Time, error) {
	return time.Parse(time.RFC3339, timestamp)
}

func FormatTimestamp(t time.Time) string {
	return t.UTC().Format(time.RFC3339)
}

// Helper methods for MoveStructView
func NewMoveStructView(name string, isNative bool, abilities []string) MoveStructView {
	return MoveStructView{
		Name:      name,
		IsNative:  isNative,
		Abilities: abilities,
	}
}

// Helper method to add fields to MoveStructView
func (m *MoveStructView) AddField(name, fieldType string) {
	m.Fields = append(m.Fields, MoveFieldView{
		Name: name,
		Type: fieldType,
	})
}

// Helper method to add generic type parameters
func (m *MoveStructView) AddGenericTypeParams(params ...string) {
	m.GenericTypeParams = append(m.GenericTypeParams, params...)
}

// Helper methods for StateChangeSetView
type StateChangeSetViewBuilder struct {
	state StateChangeSetView
}

func NewStateChangeSetViewBuilder() *StateChangeSetViewBuilder {
	return &StateChangeSetViewBuilder{
		state: StateChangeSetView{
			CreatedAt: time.Now().UTC().Format(time.RFC3339),
			UpdatedAt: time.Now().UTC().Format(time.RFC3339),
		},
	}
}

func (b *StateChangeSetViewBuilder) SetStateKey(key string) *StateChangeSetViewBuilder {
	b.state.StateKey = key
	return b
}

func (b *StateChangeSetViewBuilder) SetValue(value StateValue) *StateChangeSetViewBuilder {
	b.state.Value = value
	return b
}

func (b *StateChangeSetViewBuilder) Build() StateChangeSetView {
	return b.state
}

// Helper methods for TransactionExecutionInfoView
type TransactionExecutionInfoViewBuilder struct {
	info TransactionExecutionInfoView
}

func NewTransactionExecutionInfoViewBuilder() *TransactionExecutionInfoViewBuilder {
	return &TransactionExecutionInfoViewBuilder{
		info: TransactionExecutionInfoView{},
	}
}

func (b *TransactionExecutionInfoViewBuilder) SetHash(hash string) *TransactionExecutionInfoViewBuilder {
	b.info.Hash = hash
	return b
}

func (b *TransactionExecutionInfoViewBuilder) SetStatus(status TransactionStatusView) *TransactionExecutionInfoViewBuilder {
	b.info.Status = status
	return b
}

func (b *TransactionExecutionInfoViewBuilder) AddAuthenticator(auth TransactionAuthenticatorView) *TransactionExecutionInfoViewBuilder {
	b.info.Authentication = append(b.info.Authentication, auth)
	return b
}

func (b *TransactionExecutionInfoViewBuilder) Build() TransactionExecutionInfoView {
	return b.info
}

// Helper methods for InscriptionStateView
type InscriptionStateViewBuilder struct {
	state InscriptionStateView
}

func NewInscriptionStateViewBuilder() *InscriptionStateViewBuilder {
	return &InscriptionStateViewBuilder{
		state: InscriptionStateView{
			CreatedAt: time.Now().UTC().Format(time.RFC3339),
			UpdatedAt: time.Now().UTC().Format(time.RFC3339),
		},
	}
}

func (b *InscriptionStateViewBuilder) SetID(id string) *InscriptionStateViewBuilder {
	b.state.ID = id
	return b
}

func (b *InscriptionStateViewBuilder) SetObjectType(objectType string) *InscriptionStateViewBuilder {
	b.state.ObjectType = objectType
	return b
}

func (b *InscriptionStateViewBuilder) SetOwner(owner string) *InscriptionStateViewBuilder {
	b.state.Owner = owner
	return b
}

func (b *InscriptionStateViewBuilder) SetOwnerBitcoinAddress(address string) *InscriptionStateViewBuilder {
	b.state.OwnerBitcoinAddress = &address
	return b
}

func (b *InscriptionStateViewBuilder) SetValue(value InscriptionView) *InscriptionStateViewBuilder {
	b.state.Value = value
	return b
}

func (b *InscriptionStateViewBuilder) Build() InscriptionStateView {
	return b.state
}

// Helper methods for validation
func ValidateTransactionHash(hash string) error {
	if len(hash) == 0 {
		return NewRoochError(400, "transaction hash cannot be empty")
	}
	// Add more validation logic for transaction hash format
	return nil
}

func ValidateBlockHeight(height string) error {
	if len(height) == 0 {
		return NewRoochError(400, "block height cannot be empty")
	}
	// Add more validation logic for block height format
	return nil
}

// Helper methods for JSON handling
func (m MoveActionTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(m))
}

func (m *MoveActionTypeView) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case string(MoveActionTypeScriptCall),
		string(MoveActionTypeFunctionCall),
		string(MoveActionTypeModuleBundle):
		*m = MoveActionTypeView(s)
		return nil
	default:
		return fmt.Errorf("invalid MoveActionTypeView value: %s", s)
	}
}

// Helper methods for ServiceStatus
func (s ServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(s))
}

func (s *ServiceStatus) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return err
	}
	switch str {
	case string(ServiceStatusActive),
		string(ServiceStatusMaintenance),
		string(ServiceStatusReadOnlyMode),
		string(ServiceStatusDateImportMode):
		*s = ServiceStatus(str)
		return nil
	default:
		return fmt.Errorf("invalid ServiceStatus value: %s", str)
	}
}

// Helper methods for error handling with context
type ErrorContext struct {
	Operation string
	Details   map[string]interface{}
}

func NewErrorWithContext(code int, message string, context ErrorContext) *RoochError {
	return &RoochError{
		Code:    code,
		Message: fmt.Sprintf("%s: %s (Operation: %s)", message, formatErrorContext(context)),
	}
}

func formatErrorContext(context ErrorContext) string {
	details := ""
	for k, v := range context.Details {
		details += fmt.Sprintf("%s=%v, ", k, v)
	}
	if len(details) > 0 {
		details = details[:len(details)-2] // Remove trailing comma and space
	}
	return fmt.Sprintf("Operation: %s, Details: {%s}", context.Operation, details)
}

// Helper methods for pagination
func (p *PaginatedResponse[T]) HasMore() bool {
	return p.HasNextPage
}

func (p *PaginatedResponse[T]) GetNextCursor() interface{} {
	return p.NextCursor
}

func (p *PaginatedResponse[T]) GetItems() []T {
	return p.Data
}

// Helper method for creating empty responses
func EmptyPaginatedResponse[T any]() PaginatedResponse[T] {
	return PaginatedResponse[T]{
		Data:        make([]T, 0),
		HasNextPage: false,
	}
}
